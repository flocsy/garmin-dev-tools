# monkey-generator reads the required `monkey.template.jungle`, the optional `monkey-generator.conf`
# and generates the `monkey.jungle` file, and based on the configuration also folders and files under gen/ directory.

# The directory structue of an app could look like:
# monkey.template.jungle
# manifest.xml
# manifest-prod.xml
# source/
# resources/
# features/foo/source
# features/foo/resources
# features/foo/settings
# features/no_foo/source
# features/no_foo/resources
# features/no_foo/settings


# You can have 2 manifests in your project:
# - manifest-prod.xml for production release that includes all the devices you support.
# - manifest.xml for development and building for uploading to the store as a beta app
#    that only includes the devices you own and one device from each relevant device family.
#    What device family means depends on your project. It can be different display shapes and sizes,
#    or the amount of memory or the CIQ version or the existance of some method in the SDK.
#    Or the combination of all the above and more.
#    I keep here the devices that I frequently test with in the simulator.
# After you change which manifest to use you have to recreate monkey.jungle by running monkey-generator.py

# project.manifest = manifest-prod.xml # production
project.manifest = manifest.xml # beta


# Lines that are comments will be copied to the generated monkey.jungle file


# "Regular" lines are copied to monkey.jungle:

project.typecheck = 3
project.optimization = 3z


# it is important to only include the source/ folder for every device, because other folders have source code that will be only included based on the configuration further down

base.sourcePath = source


# You'll define the set of features relevant to your app. There are some hard-coded features, but most of them will be defined by your business logic by you.
# You can define features based on data in compiler.json, simulator.json and <device>.api.debug.xml, the manifest.
# The generated monkey.jungle will set the sourcePath, resourcePath and excludeAnnotations for each device in your active manifest.

# monkey-generator generates pairs of excludeAnnotations: foo, no_foo. For each feature there will be exactly one of them added to each device. 
# When it determines that a device has the feature `foo` it'll have the opposite excludeAnnotation:
#   fr965.excludeAnnotations=...;no_foo;...
# and if a device doesn't have feature `bar` then it'll have:
#   fr230.excludeAnnotations=...;bar;...
# So in the code you can use the annotations:
# (:no_foo) const HAS_FOO = false;
# (:foo) const HAS_FOO = true;
# (:no_foo) function func1() {do whatever you need to for devices without foo}
# (:foo) function func1() {do whatever you need to for devices with foo}

# When a device has the "foo" feature then it'll be included like:
# - if there's a directory features/foo/source/, then it'll be included in sourcePath:
#   fr965.sourcePath=$(fr965.sourcePath)...;features/foo/source
#
# - if there's a directory features/foo/resources/, then it'll be included in resourcePath:
#   fr965.resourcePath=$(fr965.resourcePath)...;features/foo/resources
#
# - I find the excludeAnnotations to be counter-intuitive, so I use them more like "includeAnnotations":
#   fr965.excludeAnnotations=...;no_foo;...

# When a device doesn't have the "foo" feature, then it'll be included like:
# - if there's a directory features/no_foo/source/, then it'll be included in sourcePath:
#   fenix3.sourcePath=$(fenix3.sourcePath)...;features/no_foo/source
#
# - if there's a directory features/no_foo/resources/, then it'll be included in resourcePath:
#   fenix3.resourcePath=$(fenix3.resourcePath)...;features/no_foo/resources
#
#   fenix3.excludeAnnotations=...;foo;...

# Hard-coded features are:
# `beta` - is determined automatically based on the manifest's filename. If it contains '-prod', then it's not beta, otherwise it is beta.
#     A common way to use this is to remove the AppName from the main resources/strings.xml and move it to features:
#     - features/no_beta/lang-eng/strings.xml: <string id="AppName">Production app name</string>
#     - features/beta/lang-eng/strings.xml: <string id="AppName">Production BETA app name</string>
#     This way you'll see your beta app has BETA in it's name that will make it easier to differentiate between them on a real device.


# I usually list here the annotations that are common for all the devices:

base.excludeAnnotations = base;exclude;no_datafield_hash;no_check_numeric;no_stats;testing


# FEATURES, KEYWORDS

# For defining most of the other things you'll use lines that look like:
# monkey_generator_<command>_<keyword> = <value>
# monkey_generator_<command>_<feature_name>_<keyword> = <value>
# i.e:
# monkey_generator_filter_device_min_memory = 65536 # command: filter_device, keyword: min_memory, value: 65536
# monkey_generator_feature_alert_view_has = showAlert # command: feature, feature_name: alert_view, keyword: has, value: showAlert

# these are the supported keywords: 'min_ciq', 'max_ciq', 'min_color_depth', 'is_beta', 'is', 'has', 'min_memory', 'json', 'key_behavior', 'key_id'

# monkey-generator not only generates monkey.jungle but also checks a few things. One of them is that you haven't forgot to add a new device to the manifest.
# The assumption is that you always download and update the device files in SDK manager. monkey-generator checks that all the existing devices that are supported
# are included in the manifest. You'll see a warning if there are devices that would be supported but are missing from the manifest.
# It searches for the SDK in the default folders (currently for Mac, if your OS has another default folder where the SDK is installed, then let me know)
# or you can set CIQ_SDK_HOME environment variable to point to the root of the SDK folder.
# To tell monkey-generator what devices (including future devices) you support you can filter them using monkey_generator_filter_device:
# monkey_generator_filter_device_<keyword> = <value>
monkey_generator_filter_device_min_memory = 65536
monkey_generator_filter_device_min_color_depth = 4
monkey_generator_filter_device_min_ciq = 3.3.1
monkey_generator_filter_device_has = getBodyBatteryHistory



# To define a feature you include one or more line with the feature:
# monkey_generator_feature_<feature_name>_<keyword> = <value>
# Feature names can use alphanumeric characters and underscore: '_'
# If your app has a feature "alert_view" that is only available on devices with minimum CIQ 3.2.0 then you can define it using the `min_ciq` keyword:
monkey_generator_feature_alert_view_min_ciq = 3.2.0
# Though it's probably better to use the `has` keyword to check if the device has the method:
monkey_generator_feature_alert_view_has = showAlert
# No matter how you define it, your code, resources from the relevant features/[no_]alert_view/ folder will be included and the proper annotations set.


# KEYWORDS:

# `min_ciq`, `max_ciq`
# Based on: the smallest CIQ vewrsion in SDK/Devices/<device>/compiler.json: /partNumbers/connectIQVersion
# Can be used to differentiate between devices based on their minimum CIQ version.
# So if a device has a ww and an apac partNumber, then the smallest connectIQVersion between them will be used.
monkey_generator_feature_cool_stuff_min_ciq = 3.2.0
monkey_generator_feature_legacy_thing_max_ciq = 4.0.0


# `min_color_depth`
# Based on: SDK/Devices/<device>/compiler.json: /bitsPerPixel
# Can be used to differentiate between devices with different color displays.
# Most useful for monochrome vs color, but can also be used to exclude devices that only have 8 colors.
monkey_generator_feature_color_min_color_depth = 4


# `is_beta`
# Based on: whether the active manifest's filename contains '-prod'
monkey_generator_feature_just_for_me_is_beta = 1 # defines (:just_for_me) annotation when we're building a beta app


# `is`
# Based on: monkey-generator.conf variables with "boolean" values: 0 or 1
# Sometimes there are multiple apps that use a commen code-base. In this case there can be a sub-directory for each app
# and in monkey-generator.conf you can define variables that are used in the common monkey.template.jungle:
# AppA/monkey-generator.conf
# AppB/monkey-generator.conf
# monkey-generator.conf
#
# monkey-generator.conf:
# IS_FOO=1
monkey_generator_feature_foo_is = {IS_FOO}


# `has`
# Based on: SDK/Devices/<device>/<device>.api.debug.xml
# Checks for a symbol or a method
monkey_generator_feature_str_compare_to_has = String.compareTo # checks for method if the value contains a '.'
monkey_generator_feature_activity_monitor_has = ActivityMonitor # checks for symbol if it doesn't contain '.'


# `min_memory`
# Based on: manifest.xml: iq:application.type and SDK/Devices/<device>/compiler.json: /appTypes/memoryLimit
# manifest-prod.xml: <iq:application type="datafield" ...>
monkey_generator_filter_device_min_memory = 32768
monkey_generator_feature_kpay_min_memory = 65536


# `json`
# Based on: any value in SDK/Devices/<device>/compiler.json or SDK/Devices/<device>/simulator.json
# value format:
# [!]{simulator|compiler}.path1[.path2[...]]
# Checks a "boolean" value:
monkey_generator_feature_touch_screen_json = simulator.display.isTouch
# or existance of a json object:
monkey_generator_feature_subscreen_json = simulator.subscreen
# '!' at the beginning of the value can be used to negate a "boolean" value:
monkey_generator_filter_device_json = !simulator.subscreen


# `key_behavior`
# Based on: SDK/Devices/<device>/simulator.json /keys/[]/behavior
# Checks whether the device has a key with the specified behavior:
monkey_generator_feature_key_behavior_previouspage_key_behavior = previousPage


# `key_id`
# Based on: SDK/Devices/<device>/simulator.json /keys/[]/id
# Checks whether the device has a key with the specified id:
monkey_generator_feature_dedicated_lap_key_key_id = lap



# BUILT-IN FEATURES:
# There are some built-in features you can use. These will either generate annotations or include source and/or resources.
# Built-in features: ciq_api, color, color_depth, color_palette, const_font, datafield_detector, datafield_layout, features, key_location,
# lang2, lang3, languages, memory_annotations, menu2, number_font, resources, [settings,] shape, smart_datafield, source.
# To use them you need to register for them:
monkey_generator_register = languages;number_font;color;color_palette;datafield_layout;memory_annotations;ciq_api;features


# `ciq_api`
# You can generate annotations indicating whether the device has at least a given CIQ version by listing them in monkey_generator_used_ciq_versions.
# This will generate: no_ciq_2_4_0, ciq_2_4_0, no_ciq_3_3_1, ciq_3_3_1 annotations:
monkey_generator_used_ciq_versions = 2.4.0;3.3.1


# `color`
# Based on: SDK/Devices/<device>/compiler.json: /bitsPerPixel
# Checks whether the device is color or monochrome


# `color_depth`
# Based on: SDK/Devices/<device>/compiler.json: /bitsPerPixel
# Includes source-features/color_depth/{colorDepth}bpp


# `color_palette`
# Based on: size of SDK/Devices/<device>/compiler.json: /palette/colors[]
# Includes source files from features/color_palette/{amoled|lcd|mip}-{2colors|8colors|14colorsA|14colorsB|64colors|1bpp|4bpp|8bpp|16bpp}/


# `const_font`
# Based on: SDK/Devices/<device>/simulator.json
# Generates gen/devices/<device>/const_font.mc files
# The following:
monkey_generator_const_font_BASE_FONT = simulator.layouts[0].datafields.datafields[0].fields[0].label.font
# generates, depending on the values in the simulator.json for each device something like:
# const BASE_FONT = Graphics.FONT_XTINY;


# `datafield_detector`
# Based on: SDK/Devices/<device>/simulator.json: /layouts[]/datafields[]/fields[]
# Generates gen/devices/<device>/datafield_detector.mc files
# The following:
monkey_generator_register = ...;datafield_detector;...
# generates constants, that are then usable to try to determine in which datafield field position in which layout the datafield runs.
# See: https://github.com/flocsy/DFDetector


# `datafield_layout`
# Based on: SDK/Devices/<device>/simulator.json: /layouts[]/datafields[]/fields[]
# Generates gen/devices/<device>/datafield_layout.mc files
# Can be used with gen/features/datafield_layout/datafield_layout.mc to draw datafields using DataField
# that look as similar as possible to SimpleDataField and the native data fields.
monkey_generator_register = ...;datafield_layout;...
# Then use the functions to get positions, fonts to use:
# function onUpdate(dc as Dc) as Void {
#     var width = dc.getWidth();
#     var height = dc.getHeight();
#     var obscurityFlags = DataField.getObscurityFlags();
#     var hash = datafield_hash(width, height, obscurityFlags);
#     dc.drawText(datafield_label_x(hash), datafield_label_y(hash), datafield_label_font(hash), "label text", datafield_label_justification(hash));


# `features`
# Based on: features/<feature...>/ files in your project
# Generates all the necessary sourcePath, resourcePath, excludeAnnotations for each device in monkey.jungle
monkey_generator_register = ...;features;...


# `key_location`
# Based on: SDK/Devices/<device>/simulator.json: /display/location/, /layouts[0]/controlBar/height, /display/shape, /keys[]/location/{x,y,width,height}
# Generates gen/devices/<device>/key_location.mc files
# Can be used to display key hints similar to the personalities but from onUpdate() using the functions in gen/features/key_hint.mc
# Currently it only displays a general hint (an arc next to the key on round devices or a line segment on rectangle devices).
# Maybe in the future will enhance to be able to display icons given by the developer.
# draw_key_hints(dc, (KEY_HINT_ENTER | KEY_HINT_ESC | KEY_HINT_MENU) as KeyHint);
# drw_key_hint_onback(dc);
monkey_generator_register = ...;key_location;...
 

# `lang2`, `lang3`
# Based on: manifest.xml: /iq:application/iq:languages[]
# Generates strings, constantc in 2 or 3 letter language directories gen/features/lang/lang-<ln> or lang-<lan> (i.e: lang-en or lang-eng for English)
# gen/features/lang/lang-eng/strings-lang-eng.xml with: <string id="lang3">eng</string>
# gen/features/lang/get_system_lang.mc
# and include them in monkey.jungle
# Can be used to get the current system language code (2 or 3 letters) even the old devices (<CIQ 3.1.0) that don't support yet DeviceSettings.systemLanguage
# var langCode = get_system_lang3();
monkey_generator_register = ...;lang3;...


# `languages`
# Based on: SDK/Devices/<device>/compiler.json: /partNumbers[]/languages[]/code and manifest.xml: /iq:application/iq:languages[]
# Generates annotations related to language features.
# Currently only supports: :hebrew, :no_hebrew based on whether the device supports Hebrew.
# Can be used for example to display different text based on the device's capabilities:
# (:no_hebrew) const HEB = "no Hebrew";
# (:hebrew) const HEB = "עברית";
monkey_generator_register = ...;languages;...


# `memory_annotations`
# Based on: manifest.xml: iq:application.type and SDK/Devices/<device>/compiler.json: /appTypes/memoryLimit
# Generates lots of annotations based on all the memory sizes of all the devices in the project.
# <device>.excludeAnnotations=$(<device>.excludeAnnotations);...;memory16K;memory32Kminus;memory64Klmemory64Kplus;memory128K;memory128Kplus;...
# it is meant to be used with annotations on code that you want to be used depending whether a device has less, equal or more memory:
# (:memory<AMOUNT>K) => will be used only on devices with exactly AMOUNT memory for the app type
# (:memory<AMOUNT>Kminus) => will be used on devices with less than AMOUNT memory for the app type
# (:memory<AMOUNT>Kplus) => will be used on devices with at least AMOUNT memory for the app type
# in other words if a device has 32K memory and all the devices in the manifest have either 16K or 32K or 64K memory, then:
# these will not be used: (:memory16K, :memory32Kminus, :memory64K, :memory64Kplus)
# these will be used: (:memory16Kplus, :memory32K, :memory32Kplus, :memory64Kminus)
monkey_generator_register = ...;memory_annotations;...


# `menu2`
# Based on: the smallest CIQ vewrsion in SDK/Devices/<device>/compiler.json: /partNumbers/connectIQVersion
# This is a shortcut for defining menu2 feature.
# Will add annotations menu2, no_menu2 and include files from features/menu2, features/no_menu2
monkey_generator_register = ...;menu2;...


# `number_font`
# Based on: ../font-analyzer/chars/<device>.chars.json
# Automatically registered by `smart_datafield`, but also can be registered "manually"
# Generates gen/features/number_font/is_numeric.mc with function is_numeric(str as String) as Boolean, based on the device's capabilities.
# Can be used to decide whether a string can be displayed using Graphics.FONT_NUMBER_* or only with the non-numeric fonts.
monkey_generator_register = ...;number_font;...


# `resources`, `source`
# Based on: SDK/Devices/<device>/compiler.json: /deviceFamily and monkey-generator.conf and resources/, resources-<deviceFamily>/,
# source/, source-<deviceFamily> folders in your project.
# Generates all the necessary resourcePath, sourcePath for each device in monkey.jungle
# It is to be used with complex projects, that can't use the built-in features of the compiler, because the resources folders are not in the directory where the
# manifest and monkey.jungle files. For example there can be the resources/, resources-round-390x390/, source/, source-round-390x390, ... folders in the root directory,
# and there can be 2 or more sub-directories with different apps that should use these folders. But each app: AppA/, AppB/ have their own manifest and monkey.jungle,
# and you don't want to copy the resources, source folders into both app's directories.
# in AppA/monkey.generator.conf:
# base_dir=../
# monkey_jungle_template=../monkey.template.jungle
monkey_generator_register = ...;resources;source;...
# Now running monkey-generator.py in AppA/ will generate all the resourcePath, sourcePath based on the devices capabilities and the existing resources folders.


# `shape`
# Based on: SDK/Devices/<device>/simulator.json: /display/shape
# Generates annotations: [no_]rectangle, [no_]round, [no_]semi_octagon, [no_]semi_round


# `smart_datafield`
# TODO



# SETTINGS

# Based on: features/<feature>/settings/<number>/settings.xml
# Generates the resourcePath in the order based on the numbers in the directories.
# This enables the developer to be in control of the order the different features' settings in the settings page.
# fetures/a/settings/20/settings-a.xml
# fetures/no_a/settings/20/settings-no-a.xml
# fetures/b/settings/10/settings-b.xml
# fetures/no_b/settings/10/settings-no-b.xml
# The above directory structure will make sure that the user will see the settings of feature b above the settings of feature a.
# This will be automatically enforced when using `features`:
monkey_generator_register = ...;features;...



# MULTI-DIMENSIONAL FEATURES

# Let's say you have 2 (or more) features. On that depend on whether the device has menu2 and one that depends on the amount of memory.
# And you want to be able to have souurce, resources, settings, annotations based on these 2 "dimensions" of features.
# You can do it by joining the features names with "_AND_". Note: the order of the feature_names should be sorted alphabetically.
monkey_generator_feature_menu2_has = Menu2
monkey_generator_feature_pro_min_memory = 32768
# You can have the following folders:
# features/menu2_AND_no_pro/...
# features/menu2_AND_pro/...
# features/no_menu2_AND_no_pro/...
# features/no_menu2_AND_pro/...

